#!/usr/bin/env python
import os, glob, subprocess

"""
Carry Out the Translate Task


Use glob to find all markdown files in `rmm/docs/`

For each one, run the pipeline using subprocess:
    - run pipeline on each document in `rmm/docs/`
    - pandoc markdown-to-json
    - panflute filter to translate json and extract links
    - pandoc json-to-markdown
    - output documents in ruskie_docs/

TODO:
    - call the pandoc API directly to avoid subprocess
"""

RMM_DOCS = 'rmm/docs'
RRMM_DOCS = 'ruskie_docs'

if not os.path.isdir(RMM_DOCS):
    err = "ERROR: No rmm/docs/ folder was found.\n"
    err += "Try cloning with --recursive,\n"
    err += "or running git submodule update --init\n"
    raise Exception(err)

cwd = os.getcwd()

print("[+] Welcome to russian rainbow mind machine!")

print("[+] Making directory for Russian documentation")
subprocess.call(['mkdir','-p',RRMM_DOCS], cwd=cwd)

for en_md in glob.glob( os.path.join(RMM_DOCS,"index.md") ):

    basename = os.path.split(en_md)[-1]
    target = os.path.join(RRMM_DOCS,basename)

    print("    [+] Now making documentation for %s to %s"%(en_md,target))
    
    # Command 1:
    # cat <md>
    cat_cmd = ['cat', en_md]
    cat_proc = subprocess.Popen(cat_cmd, stdout=subprocess.PIPE)

    # pandoc: english markdown to json
    # -f from_format
    # -t to_format
    pandoc_from_en_cmd = ['pandoc','-f','gfm','-t','json','-s']
    pandoc_from_en_proc = subprocess.Popen(pandoc_from_en_cmd, stdin=cat_proc.stdout, stdout=subprocess.PIPE)

    pandoc_filter_cmd = ['filters/ruskie.py']
    pandoc_filter_proc = subprocess.Popen(pandoc_filter_cmd, stdin=pandoc_from_en_proc.stdout, stdout=subprocess.PIPE)

    pandoc_to_ru_cmd = ['pandoc','-f','json','-t','gfm']
    pandoc_to_ru_proc = subprocess.Popen(pandoc_to_ru_cmd, stdin=pandoc_filter_proc.stdout, stdout=subprocess.PIPE)

    with open(target,'wb') as f:
        f.write(pandoc_to_ru_proc.stdout.read())

    print("    [+] Finished with file %s, translated to %s"%(en_md,target))

print("[+] All done!")

